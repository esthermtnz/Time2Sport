# Generated by Django 5.1.6 on 2025-03-21 09:30

import django.contrib.auth.models
import django.contrib.auth.validators
import django.db.models.deletion
import django.utils.timezone
import gestion_deportiva.models
import uuid
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0012_alter_user_first_name_max_length'),
    ]

    operations = [
        migrations.CreateModel(
            name='Activity',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=255)),
                ('location', models.CharField(max_length=255)),
                ('description', models.TextField()),
                ('activity_type', models.CharField(choices=[('terrestre', 'Terrestre'), ('acuática', 'Acuática')], max_length=15)),
            ],
        ),
        migrations.CreateModel(
            name='Schedule',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('day_of_week', models.CharField(choices=[('Monday', 'Monday'), ('Tuesday', 'Tuesday'), ('Wednesday', 'Wednesday'), ('Thursday', 'Thursday'), ('Friday', 'Friday'), ('Saturday', 'Saturday'), ('Sunday', 'Sunday')], max_length=10)),
                ('hour_begin', models.TimeField()),
                ('hour_end', models.TimeField()),
            ],
        ),
        migrations.CreateModel(
            name='User',
            fields=[
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('username', models.CharField(error_messages={'unique': 'A user with that username already exists.'}, help_text='Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only.', max_length=150, unique=True, validators=[django.contrib.auth.validators.UnicodeUsernameValidator()], verbose_name='username')),
                ('first_name', models.CharField(blank=True, max_length=150, verbose_name='first name')),
                ('last_name', models.CharField(blank=True, max_length=150, verbose_name='last name')),
                ('email', models.EmailField(blank=True, max_length=254, verbose_name='email address')),
                ('is_staff', models.BooleanField(default=False, help_text='Designates whether the user can log into this admin site.', verbose_name='staff status')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this user should be treated as active. Unselect this instead of deleting accounts.', verbose_name='active')),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now, verbose_name='date joined')),
                ('id', models.UUIDField(default=uuid.uuid4, help_text='Unique id for the user', primary_key=True, serialize=False)),
                ('profile', models.ImageField(default='default_profile.png', upload_to=gestion_deportiva.models.User.user_directory_path)),
                ('is_uam', models.BooleanField(blank=True, null=True)),
                ('user_type', models.CharField(choices=[('notUAM', 'Usuario no perteneciente a la UAM'), ('student', 'Estudiante UAM'), ('professor', 'Personal docente o investigador UAM'), ('administrative', 'Personal Administrativo UAM'), ('alumni', 'Ex-alumno de la UAM')], max_length=30, null=True)),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.group', verbose_name='groups')),
                ('user_permissions', models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.permission', verbose_name='user permissions')),
            ],
            options={
                'verbose_name': 'user',
                'verbose_name_plural': 'users',
                'abstract': False,
            },
            managers=[
                ('objects', django.contrib.auth.models.UserManager()),
            ],
        ),
        migrations.CreateModel(
            name='Bonus',
            fields=[
                ('id', models.AutoField(primary_key=True, serialize=False)),
                ('bonus_type', models.CharField(choices=[('annual', 'Bono Anual'), ('semester', 'Bono Semestral'), ('single', 'Bono Sesión Única')], max_length=10)),
                ('price', models.DecimalField(decimal_places=2, max_digits=6)),
                ('activity', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='bonuses', to='gestion_deportiva.activity')),
            ],
        ),
        migrations.AddField(
            model_name='activity',
            name='schedules',
            field=models.ManyToManyField(blank=True, related_name='activities', to='gestion_deportiva.schedule'),
        ),
        migrations.CreateModel(
            name='SportFacility',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=255)),
                ('numberOf_facilities', models.IntegerField()),
                ('description', models.TextField()),
                ('hour_price', models.FloatField()),
                ('facility_type', models.CharField(choices=[('exterior', 'Exterior'), ('interior', 'Interior')], max_length=10)),
                ('schedules', models.ManyToManyField(blank=True, related_name='sport_facilities', to='gestion_deportiva.schedule')),
            ],
        ),
        migrations.CreateModel(
            name='Photo',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('image', models.ImageField(upload_to=gestion_deportiva.models.photo_upload_path)),
                ('activity', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='photos', to='gestion_deportiva.activity')),
                ('facility', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='photos', to='gestion_deportiva.sportfacility')),
            ],
        ),
    ]
